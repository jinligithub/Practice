//////////////////////////////////////////////////////////////////////////////////////////////////////
使用抽象类
abstract class Person{
    private String name;
    public String getname(){
        return name;
    }
    public void setname(String name){
        this.name=name;
    }
    public Person(){//构造方法，子类实例化对象时，先执行父类构造，在执行子类构造方法
        System.out.println("hello");
    }
    public abstract void getPersonInfo();
}
class Student extends Person{
    public void getPersonInfo(){//子类覆写抽象方法
       System.out.println("i am");
    }
}
public class Abstract{
    public static void main(String[] agrs){
        Person per=new Student();//向上转型
        per.getPersonInfo();//被子类覆写的方法
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////
抽象类的另一种形式
abstract class Person{
    private String name;
    public String getname(){
        return name;
    }
    public void setname(String name){
        this.name=name;
    }
    public abstract void  getPersonInfo();
    public static Person  getInstance(){//获取Person对象
        class Student extends Person{//调用抽象类的子类（内部类）
            public void getPersonInfo(){
                System.out.println("i am stu");
            }
        }
        return new Student();
    }
}
public class Abstract{
    public static void main(String[] agrs){
        Person per=Person.getInstance();
        per.getPersonInfo();//被子类覆写的方法
    }
}

//////////////////////////////////////////////////////////////////////////////////////
在抽象类中也允许提供构造方法，并且子类照样遵循对象实例化的流程，实例化子类对象时先调用父类构造方法
abstract class Person{
    private String name;
    public String getname(){
        return name;
    }
    public void setname(String name){
        this.name=name;
    }
    public Person(){//构造方法，子类实例化对象时，先执行父类构造，在执行子类构造方法
        System.out.println("hello");
    }
    public abstract void getPersonInfo();
}
class Student extends Person{
    public Student(){
        System.out.println("world");
    }
    public void getPersonInfo(){//子类覆写抽象方法
       System.out.println("i am");
    }
}
public class Abstract{
    public static void main(String[] agrs){
        
         Person per=new Student();
         per.getPersonInfo();//被子类覆写的方法
    }
}
输出
hello
world
i am

///////////////////////////////////////////////////////////////////////////////////////
如果构造方法，那么对象中的属性一定都是其对应属性的默认值
abstract class A{
    public A(){//3.调用子类构造方法
        this.print();//4.调用倍子类覆写的方法
    }
    public abstract void print();
}
class B extends A{
    private int num=300;
    public B(int num){//2.子类实例化对象
        super();//3.调用父类构造方法
        this.num=num;//7.为类中属性初始化值
    }
    public void print(){//5.调用子类覆写的方法
        System.out.println(this.num);//6.打印数据类型的默认值
    }
}
public class Abstract{
    public static void main(String[] agrs){
        new B(30);//1.实例化对象
    }
}
//输出0
实例化对象：a.进行类加载。b.进行类对象的空间开辟。c.进行类对象中的属性初始化


////////////////////////////////////////////////////////////////////////////////////////////////////

abstract class A{
    public abstract void printA();
    static abstract class B{
        public abstract void printB();
    } 
}
class X extends A.B{
    public void printB(){
        System.out.println("hello");
    }
}
public class Abstract{
    public static void main(String[] agrs){
        X x=new X();//1.实例化对象
        x.printB();
    }
}